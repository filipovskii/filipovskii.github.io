<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Boris</title>
    <atom:link href="http://filipovskii.github.com/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://filipovskii.github.com</link>
    <description>tech blog by russian guy</description>
    <pubDate>Thu, 05 Sep 2013 04:00:00 +0400</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>JS TDD session: State vs. History</title>
      <link>http://filipovskii.github.com/articles/tdd-state-vs-history/</link>
      <pubDate>Thu, 05 Sep 2013 04:00:00 +0400</pubDate>
      <guid isPermaLink="true">http://filipovskii.github.com/articles/tdd-state-vs-history/</guid>
      <author></author>
      <description>&lt;p&gt;Things change over time. They evolve, mutate and regress throughout once
life cycle. Today I want to talk about keeping track of those changes, by
comparing two most common techniques: &lt;em&gt;state objects&lt;/em&gt; and &lt;em&gt;history&lt;/em&gt;.
&lt;span class=&quot;more&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This post will be in a form of TDD session. First I will state a problem
and write a test for it, then try to solve it by writing implementation.
I will use the same approach as in my everyday job. All code will be in
javascript.&lt;/p&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Before we dive into the coding process, here are tools I&amp;#39;ll be using:
&lt;a href=&quot;http://nodejs.org/&quot;&gt;node.js&lt;/a&gt;, &lt;a href=&quot;http://underscorejs.org/&quot;&gt;underscore&lt;/a&gt;, and &lt;a href=&quot;http://mocha.com/&quot;&gt;mocha&lt;/a&gt; for testing.
If you&amp;#39;re not familiar with &lt;em&gt;mocha&lt;/em&gt; yet, you should probably take a quick
look &lt;a href=&quot;http://mocha.com/&quot;&gt;here&lt;/a&gt;. If you don&amp;#39;t know much about &lt;em&gt;node&lt;/em&gt; or &lt;em&gt;underscore&lt;/em&gt;,
but are comfortable with &lt;em&gt;javascript&lt;/em&gt;, it&amp;#39;s not a big deal, but I
definitely recommend to check it out.&lt;/p&gt;
&lt;p&gt;You should also be familiar with &lt;a href=&quot;http://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;TDD&lt;/a&gt;. There are lots of good books
and articles on this subject. &lt;a href=&quot;http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530/ref=sr_1_1?ie=UTF8&amp;amp;qid=1378370467&amp;amp;sr=8-1&amp;amp;keywords=kent+beck+test+driven+development+by+example&quot;&gt;Test Driven Development by Example&lt;/a&gt; is great to start with.&lt;/p&gt;
&lt;h2&gt;Task&lt;/h2&gt;
&lt;p&gt;Suppose you are implementing an app where user can play different games.
Each game has an id and a state you need to keep track of. Suppose game
can be &lt;strong&gt;started&lt;/strong&gt;, &lt;strong&gt;won&lt;/strong&gt; or &lt;strong&gt;lost&lt;/strong&gt; (both last states also mean it is
&lt;strong&gt;finished&lt;/strong&gt;). Initial state of a game, before user interactions, is
&lt;strong&gt;new&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Project structure:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;.
├── README.markdown
├── game-history.js     -&amp;gt; *history*  implementation
├── game-state.js       -&amp;gt; *state*    implementation
├── node_modules
│   └── underscore
│       └── ...
├── package.json
└── test
    └── test.js         -&amp;gt; test suite&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;State implementation&lt;/h2&gt;
&lt;p&gt;First we will deal with &lt;strong&gt;state implementation&lt;/strong&gt;. Initial assumption is
before any user interaction, game should be &lt;strong&gt;new&lt;/strong&gt;. Here is a test for
that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;
  &lt;span class=&quot;comment&quot;&gt;// ./test/test.js&lt;/span&gt;

  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; assert = require(&lt;span class=&quot;string&quot;&gt;'assert'&lt;/span&gt;);

  describe(&lt;span class=&quot;string&quot;&gt;'Game implemented via state'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; game = require(&lt;span class=&quot;string&quot;&gt;'../game-state'&lt;/span&gt;),
        userId = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,
        gameId = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;

    it(&lt;span class=&quot;string&quot;&gt;'has initial state of `new`'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
      assert(game.isNew(userId, gameId));
    });

  });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Launch tests in console with &lt;a href=&quot;http://mocha.com/&quot;&gt;mocha&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/path/to/project$ mocha&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;By the way, you can make tests run every time you save a file with
&lt;/em&gt;&lt;code&gt;mocha -w&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And… it is failing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1 failing

  1) Game implemented via state has initial state of `new`:

   TypeError: Object #&amp;lt;Object&amp;gt; has no method &amp;#39;isNew&amp;#39;
    at ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quickly add a simpliest implementation possible:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;
  &lt;span class=&quot;comment&quot;&gt;// ./game-state.js&lt;/span&gt;

  exports.isNew = isNew;

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isNew&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And mocha tells us we are done with this for now:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 passing&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Moving forward. When user starts a game, it becomes &lt;strong&gt;started&lt;/strong&gt;.
The Test:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ./test/test.js&lt;/span&gt;

  it(&lt;span class=&quot;string&quot;&gt;'changes to `started` on game start'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    game.start(userId, gameId);

    assert(game.isStarted(userId, gameId));
    assert(!game.isNew(userId, gameId));
  });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It fails, with a similar TypeError, which is easy to fix:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ./game-state.js&lt;/span&gt;

  exports.isStarted = isStarted;
  exports.start = start;

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isStarted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt; }
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which brings us to AssertionError now:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1 passing
  1 failing

  1) Game implemented via state changes to `started` on game start:
   AssertionError: &amp;quot;undefined&amp;quot; == true
   ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we create a storage for the state. Implement &lt;code&gt;isStarted&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt;
functions and change &lt;code&gt;isNew&lt;/code&gt; function, so
&lt;code&gt;assert(!game.isNew(userId, gameId))&lt;/code&gt; does not fail.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ./game-state.js&lt;/span&gt;

  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; state = {};

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isNew&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(userId, gameId)&lt;/span&gt; {&lt;/span&gt;

    &lt;span class=&quot;comment&quot;&gt;// this will prevent fails when isNew()&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// is called for the user with no state&lt;/span&gt;
    state[userId] = state[userId] || {};

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !state[userId][gameId];
  }

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isStarted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(userId, gameId)&lt;/span&gt; {&lt;/span&gt;
    state[userId] = state[userId] || {};
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state[userId][gameId] === &lt;span class=&quot;string&quot;&gt;'started'&lt;/span&gt;;
  }

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(userId, gameId)&lt;/span&gt; {&lt;/span&gt;
    state[userId] = state[userId] || {};
    state[userId][gameId] = &lt;span class=&quot;string&quot;&gt;'started'&lt;/span&gt;;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now both our tests pass. We can start games like… everyday. Pretty cool,
I guess. But it would be even better if we could win a game! Yeah, that
sounds like something I&amp;#39;ve always wanted:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ./test/test.js&lt;/span&gt;

  it(&lt;span class=&quot;string&quot;&gt;'changes to `finished` on win'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    game.start(userId, gameId);
    game.win(userId, gameId);

    assert(game.isStarted(userId, gameId));
    assert(game.isFinished(userId, gameId));
    assert(game.isWon(userId, gameId));
    assert(!game.isLost(userId, gameId));

  });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Moving quickly (under the hood I make it first fail with AssertionError,
than provide implementation) leads me to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ./game-state.js&lt;/span&gt;

  exports.isFinished = isFinished;
  exports.isWon = isWon;
  exports.win = win;


  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isFinished&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(userId, gameId)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; isWon(userId, gameId) || isLost(userId, gameId);
  }


  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isLost&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(userId, gameId)&lt;/span&gt; {&lt;/span&gt;
    state[userId] = state[userId] || {};
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state[userId][gameId] === &lt;span class=&quot;string&quot;&gt;'lost'&lt;/span&gt;;
  }


  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isStarted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(userId, gameId)&lt;/span&gt; {&lt;/span&gt;
    state[userId] = state[userId] || {};
    &lt;span class=&quot;comment&quot;&gt;// consider every finished game was started once...&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _.contains([ &lt;span class=&quot;string&quot;&gt;&quot;started&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;won&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;lost&quot;&lt;/span&gt; ], state[userId][gameId]);
  }


  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isWon&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(userId, gameId)&lt;/span&gt; {&lt;/span&gt;
    state[userId] = state[userId] || {};
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state[userId][gameId] === &lt;span class=&quot;string&quot;&gt;'won'&lt;/span&gt;;
  }


  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;win&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(userId, gameId)&lt;/span&gt; {&lt;/span&gt;
    state[userId] = state[userId] || {};
    state[userId][gameId] = &lt;span class=&quot;string&quot;&gt;'won'&lt;/span&gt;;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Loosing a game is pretty similar to winning, in terms of code, so I leave
it up to you to imaging.&lt;/p&gt;
&lt;h2&gt;History implementation. Comparison&lt;/h2&gt;
&lt;p&gt;Using same tests (which is kinda great), I&amp;#39;ve made a &lt;em&gt;history&lt;/em&gt;-based
implementation of the solution for the same problem. Idea behind it is:
“Save every action user makes in a list. Every time game
state is requested, calculate it based on data about what actions user
made.”&lt;/p&gt;
&lt;p&gt;Let&amp;#39;s compare those two implementations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TEST&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  it(&lt;span class=&quot;string&quot;&gt;'has initial state of `new`'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    assert(game.isNew(userId, gameId));
  });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;STATE impl&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; state = {};

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isNew&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(userId, gameId)&lt;/span&gt; {&lt;/span&gt;
    state[userId] = state[userId] || {};
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !state[userId][gameId];
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;HISTORY impl&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; history = [];

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isNew&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(userId, gameId)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// check if user have made *any* actions&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !_.any(history, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(h)&lt;/span&gt; {&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; h.userId === userId &amp;amp;&amp;amp; h.gameId === gameId;
    });
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those two are pretty similar. Time complexity of &lt;strong&gt;state impl&lt;/strong&gt; will be
&lt;code&gt;O(1)&lt;/code&gt;, because all we need to do is to look up values in two dictionaries
(js objects). For the &lt;strong&gt;history impl&lt;/strong&gt; it is &lt;code&gt;O(n)&lt;/code&gt;, where n is a number
of events. That&amp;#39;s because we need to iterate through all of the events
until we find one with &lt;code&gt;userId&lt;/code&gt; and &lt;code&gt;gameId&lt;/code&gt; similar to what was given.&lt;/p&gt;
&lt;p&gt;Next test is about changing a state of the game:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TEST&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  it(&lt;span class=&quot;string&quot;&gt;'changes to `started` on game start'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; {&lt;/span&gt;
    game.start(userId, gameId);

    assert(game.isStarted(userId, gameId));
    assert(!game.isNew(userId, gameId));
  });&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;STATE impl&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(userId, gameId)&lt;/span&gt; {&lt;/span&gt;
    state[userId] = state[userId] || {};
    state[userId][gameId] = &lt;span class=&quot;string&quot;&gt;'started'&lt;/span&gt;;
  }

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isStarted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(userId, gameId)&lt;/span&gt; {&lt;/span&gt;
    state[userId] = state[userId] || {};
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _.contains([ &lt;span class=&quot;string&quot;&gt;&quot;started&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;won&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;lost&quot;&lt;/span&gt; ], state[userId][gameId]);
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;HISTORY impl&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(userId, gameId)&lt;/span&gt; {&lt;/span&gt;
    history.push({
      userId: userId,
      gameId: gameId,
      action: &lt;span class=&quot;string&quot;&gt;'start'&lt;/span&gt;
    });
  }


  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isStarted&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(userId, gameId)&lt;/span&gt; {&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _.any(history, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(h)&lt;/span&gt; {&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (
        h.userId === userId &amp;amp;&amp;amp;
        h.gameId === gameId &amp;amp;&amp;amp;
        h.action === &lt;span class=&quot;string&quot;&gt;'start'&lt;/span&gt;
      )
    });
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To change a game state using &lt;strong&gt;state impl&lt;/strong&gt; you need to change one value
in a dictionary. To change game state using &lt;strong&gt;history impl&lt;/strong&gt;, you add an
action to array. Depending on how &lt;code&gt;Array.push()&lt;/code&gt; works, &lt;strong&gt;history impl&lt;/strong&gt;
may take &lt;code&gt;O(1) or O(n)&lt;/code&gt; time to do this. &lt;code&gt;isStarted()&lt;/code&gt; takes same amount
of time as &lt;code&gt;isNew()&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;To summarize&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;u - number of users
g - number of games
e - number of events

Implementation  | Operation  |  Time
----------------|------------|--------------
state           |check state |  O(1)
history         |check state |  O(e)
state           |change state|  O(1)
history         |change state|  O(1) or O(e)

Implementation  | Space Required
----------------|---------------
state           | O(u*g)
history         | O(e)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In a real world &lt;code&gt;state&lt;/code&gt; object we were using for &lt;strong&gt;state impl&lt;/strong&gt; and
&lt;code&gt;history&lt;/code&gt; array can be replaced with tables (collections) in database.&lt;/p&gt;
&lt;p&gt;Although from performance point of view &lt;strong&gt;state impl&lt;/strong&gt; is slightly better
than &lt;strong&gt;history impl&lt;/strong&gt;, the latter has an obvious advantage in storing
additional info, e.g. the time of the state transition or user score,
together with the action itself.&lt;/p&gt;
&lt;p&gt;I personally tend to use &lt;strong&gt;history impl&lt;/strong&gt;-like solutions more often.
Especially when it comes to implementing something with unclear
requirements. And it is great to use &lt;strong&gt;state impl&lt;/strong&gt; solutions for
caching purposes in case you are not satisfied with &lt;code&gt;O(e)&lt;/code&gt; time of check
state.&lt;/p&gt;
&lt;p&gt;You can find the code for this article &lt;a href=&quot;https://github.com/filipovskii/filipovskii.github.io/tree/article/tdd-state-vs-history/src/contents/articles/tdd-state-vs-history/code&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More examples of tests in javascript are on github:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/visionmedia/express/tree/master/test&quot;&gt;express&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kriskowal/q/tree/master/spec&quot;&gt;q&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jashkenas/underscore/tree/master/test&quot;&gt;underscore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;#39;s it, thanks for your time!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Storing data, the easy way</title>
      <link>http://filipovskii.github.com/articles/data-easy-way/</link>
      <pubDate>Sun, 25  Aug 2013 04:00:00 +0400</pubDate>
      <guid isPermaLink="true">http://filipovskii.github.com/articles/data-easy-way/</guid>
      <author></author>
      <description>&lt;p&gt;Choosing appropriate data storage is one of the first and most important
decisions you have to face once you&amp;#39;ve started implementing an application
(at least in web or mobile world). There are lots of possibilities out
there, SQL and NoSQL, documents and objects and graphs and tables and
whatnot. But I want to talk about those cases, when a fully-featured
database for storing your data may be either not enough or too much.
&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;To be clear, by database I mean &lt;a href=&quot;http://en.wikipedia.org/wiki/Database&quot;&gt;DBMS&lt;/a&gt; or database management
system, and by data storage I mean any organized representation of your
data.&lt;/p&gt;
&lt;h2&gt;RAM&lt;/h2&gt;
&lt;p&gt;That&amp;#39;s pretty obvious. You need to store non-critical data and have fast
access to it &amp;mdash; use RAM. Classical use cases include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Mock storage for unit tests&lt;/p&gt;
&lt;p&gt;Instead of running your tests using real database, sometimes it&amp;#39;s
easier to mock storage using some build-in collections like lists,
dictionaries (aka maps) etc.&lt;/p&gt;
&lt;p&gt;It forces you to write database-agnostic code, isolate storage
interaction and concentrate on application logic. Which is a good
thing, obviously.&lt;/p&gt;
&lt;p&gt;Here is an example of a simple mock in javascript:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; users = {}; &lt;span class=&quot;comment&quot;&gt;// fill this with mock data&lt;/span&gt;

    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getUserById&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(id)&lt;/span&gt; {&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; users[id];
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cache&lt;/p&gt;
&lt;p&gt;Instead of reading often used data from disk all the time, cache it in
memory! It is fast and nothing inevitable can happen once your app
unexpectedly shut down.&lt;/p&gt;
&lt;p&gt;I use it a lot. In the most recent project, I&amp;#39;ve been working on, all
the vital data gets loaded into cache in RAM on application start up
and is updated in cache first, before any changes get stored to disk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pre-aggregation&lt;/p&gt;
&lt;p&gt;Suppose you need to track page views on popular site&amp;hellip; all of
them. That&amp;#39;s a lot of data. Writing each page view to disk real-time
will certainly lead to performance issues.&lt;/p&gt;
&lt;p&gt;It is possible to improve performance by storing data in RAM first,
and flushing it to disk every now and then. To optimize even more in
case you need to track just certain parameters (e.g. User-Agent),
pre-aggregate data based on those and then flush it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Chrome    300 visits
Firefox   220 visits&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is a chance of losing data, while it is not on the disk. That&amp;#39;s
a price you have to pay for performance. Think about how much data you
can afford to loose and tweak &lt;em&gt;period in which flushing occurs&lt;/em&gt;
accordingly.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://heymoose.com/&quot;&gt;Heymoose&lt;/a&gt;, advertising platform I was working on,
uses this tactics to store ad shows and clicks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course there are more possible use cases. The general idea is: “If
you want to keep things simple and you&amp;#39;re not afraid to loose data up
to some point, RAM is a great easy-to-use storage available out of (your
favourite language) box.”&lt;/p&gt;
&lt;h2&gt;Files&lt;/h2&gt;
&lt;p&gt;This is &lt;em&gt;the most underestimated storage&lt;/em&gt; in web development of all time.
I think it all began with &lt;a href=&quot;http://en.wikipedia.org/wiki/LAMP_(software_bundle)&quot;&gt;LAMP&lt;/a&gt;. &lt;em&gt;MySQL&lt;/em&gt; became a minimum
requirement for building a website, thus the simplest, fastest and
sometimes even more reliable storage forgotten&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Plain-text files&lt;/em&gt; can be used for lots of stuff, although there are
certain use cases, when they are simply the best fit for the job:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Log-like data&lt;/p&gt;
&lt;p&gt;Access logs, error logs, debug logs &amp;mdash; this is a huge amount of
important data. Applications do not tend to use &lt;em&gt;DBMS&lt;/em&gt; for this. It&amp;#39;s
simpler and faster to write to files.  And, most importantly, it
&lt;em&gt;reduces the number of levels of complexity&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In the past I was working on &lt;a href=&quot;http://en.wikipedia.org/wiki/Financial_Information_eXchange&quot;&gt;FIX&lt;/a&gt; traffic analyser tool. The
low level part of this project was written in C and was responsible
for capturing and writing FIX messages into rotated log. High level
part was providing a fancy web interface for searching and analyzing
those messages.&lt;/p&gt;
&lt;p&gt;Amount of data was huge, DBMS would require lots of resources to
handle it. With files (in conjunction with with pre-aggregation) it
became possible.&lt;/p&gt;
&lt;p&gt;Indexing and searching through this data was implemented with
&lt;a href=&quot;http://www.elasticsearch.org/&quot;&gt;ElasticSearch&lt;/a&gt;. It all worked like a charm!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Replacement for a database with a simple structure&lt;/p&gt;
&lt;p&gt;For prototypes, tests or even working apps, it is possible to use
files to store your data like you would use a database:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db
├── painters
│   ├── k.malevich@square.io.json
│   ├── r.falk@msk.ru.json
│   └── v.kandinsky@circles.ru.json
└── paintings
    ├── black-square.json
    ├── moscow-I.json
    └── portrait-of-a-tatar-journalist-midhat-refatov.json&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Working with files in high-level languages is fun and easy. Considering
&lt;a href=&quot;http://en.wikipedia.org/wiki/Page_cache&quot;&gt;caching&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Epoll&quot;&gt;epoll&lt;/a&gt; and other cool options, it can also
be very efficient and convenient.&lt;/p&gt;
&lt;h2&gt;To summarize&lt;/h2&gt;
&lt;p&gt;Storing your data is not only about MySQL, PostgreSQL, MongoDB etc. Very
often compound solutions may lead to cleaner code, higher performance and
flexibility. And sometimes you don&amp;#39;t even need fully-featured DBMS at all.&lt;/p&gt;
&lt;p&gt;Use programs that do one thing and do it well. Use programs to work
together.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Rethinking DRY and KISS</title>
      <link>http://filipovskii.github.com/articles/code-quality-metrics/</link>
      <pubDate>Sun, 21 Jul 2013 04:00:00 +0400</pubDate>
      <guid isPermaLink="true">http://filipovskii.github.com/articles/code-quality-metrics/</guid>
      <author></author>
      <description>&lt;p&gt;Every programmer instantly measures quality of code, whether it is his
(her/their?) own masterpiece, or some crap written by some other guy. And
there are lots of metrics defined by smart people out there, that help you
in this
(&lt;a href=&quot;http://en.wikipedia.org/wiki/Cohesion_%28computer_science%29&quot;&gt;cohesion&lt;/a&gt;,
&lt;a href=&quot;http://en.wikipedia.org/wiki/Code_coverage&quot;&gt;code coverage&lt;/a&gt;,
&lt;a href=&quot;http://www.osnews.com/story/19266/WTFs_m&quot;&gt;WTFs/minute&lt;/a&gt;). Well, I‘m no
exception, and just recently I’ve started to think about what am I paying
attention to in the first place.  &lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Turned out, there are just two things, that bother me most of the time:
&lt;strong&gt;complexity&lt;/strong&gt; and &lt;strong&gt;duplication&lt;/strong&gt;. This is all I need to tell whether code
I‘m looking at is worth something.. And that’s what &lt;strong&gt;DRY&lt;/strong&gt; (don&amp;#39;t repeat
yourself) and &lt;strong&gt;KISS&lt;/strong&gt; (keep it super simple) are about.&lt;/p&gt;
&lt;h2&gt;Complexity&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Writing software is hard!&lt;/em&gt; You have to joggle all this abstract concepts,
think about what library to use and how efficient your code is and so on.
Years spent doing this made me come to a simple conclusion:&lt;/p&gt;
&lt;p&gt;I am not that smart.&lt;/p&gt;
&lt;p&gt;There are people that can handle it much better than me. They can keep in
mind &lt;em&gt;stack traces 200 calls long&lt;/em&gt;, name you all &lt;em&gt;70 functions&lt;/em&gt; of a module
in alphabetical order and tell what is that &lt;em&gt;100 lines of code block&lt;/em&gt; doing
just by looking at it for 5 secs.&lt;/p&gt;
&lt;p&gt;I can&amp;#39;t. These things matter to me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Actual size of code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Number of levels of abstraction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Number of condition operators&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Presence of naming conventions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Number of third party libraries used&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A lot more..&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking at code I ask myself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Is the purpose of this function/method/class obvious and &lt;em&gt;unambiguous&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Or should I change its name, signature, remove it, break into several
smaller peaces, or merge into greater meaningful peace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is this level of abstraction necessary? &lt;em&gt;Does it remove any duplication?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Introducing unnecessary abstractions is, sadly, one of the most favourite
activities of contemporary programmer. Too many abstractions make code
harder to understand, debug and …yeah… change. So &lt;a href=&quot;http://pyvideo.org/video/880/stop-writing-classes&quot;&gt;use functions
instead of classes&lt;/a&gt;,
lightweight frameworks instead of huge &lt;code&gt;MV(\w*)C&lt;/code&gt; beasts, and no ORMs,
&lt;em&gt;please&lt;/em&gt;!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is it absolutely inevitably to use inheritance? In most cases it adds
incredible amount of complexity.&lt;/p&gt;
&lt;p&gt;Should I use composition? Oh look, they even got
&lt;a href=&quot;http://en.wikipedia.org/wiki/Composition_over_inheritance&quot;&gt;wikipedia&lt;/a&gt;
article for this..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do I &lt;em&gt;need&lt;/em&gt; this third party library here?&lt;/p&gt;
&lt;p&gt;First answer should be &lt;em&gt;NO&lt;/em&gt;, cause everyone working with this code will
also need to understand how this library works and foreign code may
introduce subtle bugs and/or performance issues.&lt;/p&gt;
&lt;p&gt;Won&amp;#39;t it be easier to write something using just standard libs first?&lt;/p&gt;
&lt;p&gt;If I‘m absolutely sure, I will look through its source and check if it’s
still actively supported by community before adding this library to the
project.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/presentations/Simple-Made-Easy&quot;&gt;“Simple made easy” by Rich
Hickey&lt;/a&gt; is a great
source of inspiration for me when it comes to complexity in software. I
strongly recommend watching it, regardless of your opinion about &lt;em&gt;Closure&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Duplication&lt;/h2&gt;
&lt;p&gt;Although it seems superficial, &lt;em&gt;code duplication&lt;/em&gt;, in my opinion, is a
fundamental problem in software engineering. All this complex concepts, such
as design patterns and programming paradigms serve just one purpose - remove
duplication from code. That&amp;#39;s it. &lt;em&gt;It is that simple!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Same or &lt;em&gt;roughly similar&lt;/em&gt; code in several different places is bad. You have
to keep in mind all these peaces and change them simultaneously. Well…
you know.&lt;/p&gt;
&lt;p&gt;I began to realize this mostly after reading some of the books on TDD by
&lt;a href=&quot;http://en.wikipedia.org/wiki/Kent_Beck&quot;&gt;Kent Beck&lt;/a&gt;, which I again strongly
recommend.&lt;/p&gt;
&lt;p&gt;Interesting thing is that there is &lt;em&gt;only one way&lt;/em&gt; to solve this problem of
similar code. And that is complicating things. &lt;em&gt;What an irony!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Think about it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Once I see a duplication (aka &lt;em&gt;reusable behavior&lt;/em&gt;), I abstract it in a
class or function or module or even whole abstraction layer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Instead of writing my own implementation of http-protocol (&lt;em&gt;duplicating
something somebody else wrote&lt;/em&gt;) every time I develop a webapp, I simply
use a third-party library.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tradeoff&lt;/h2&gt;
&lt;p&gt;All I am saying is that without oversimplifying things, &lt;strong&gt;complexity&lt;/strong&gt;
and &lt;strong&gt;duplication&lt;/strong&gt; are all I really care about in programming.&lt;/p&gt;
&lt;p&gt;Like most things in the industry, you need to find a tradeoff between
those two. Removing duplication leads to increasing complexity and
sometimes vice versa.  Depending on situation, project,
time-performance-[other] constrains I prefer one over another. Sometimes I
make a decision, that implies some duplication, and only if it keeps
bothering me, I refactor it later. It&amp;#39;s important that &lt;strong&gt;common sense
plays the main role in it!&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;“All theory is gray, my friend. But forever green is the tree of life.”&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That‘s why I’m going to write about some cases, where I apply this two
criterions, in future posts.&lt;/p&gt;
&lt;p&gt;Till then!&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>